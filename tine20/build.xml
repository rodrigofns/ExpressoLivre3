<?xml version="1.0" encoding="UTF-8"?>

<!-- ============================================  -->
<!-- Build Definition for Tine 2.0                 -->
<!--                                               -->
<!-- http://www.tine20.org                         -->
<!-- http://www.phing.info                         -->
<!-- ============================================  -->
<project name="tine20" description="Tine 2.0 build file" default="build">
    
    <property name="builddir" value="${project.basedir}/build" override="true" />
    <property name="localedir" value="Tinebase/js/Locale" override="true" />
    
    <!-- ============================================  -->
    <!-- Target: prepare                               -->
    <!-- ============================================  -->
    <target name="prepare">
        <echo msg="$buildDate: ${project.basedir}" />
        <init />
        
        <php expression="getDevelopmentRevision();" returnProperty="buildRevision" />
        <echo msg="$buildRevision: ${buildRevision}" />
        
        <php expression="date_create('now')->format('Y-m-d H:i:s');" returnProperty="buildDate" />
        <echo msg="$buildDate: ${buildDate}" />
        
        <echo msg="Making build directory" />
        <mkdir dir="${builddir}" />
        <mkdir dir="${builddir}/${localedir}/build" />
        <mkdir dir="${builddir}/${localedir}/static" />
    </target>
    
    <!-- ============================================  -->
    <!-- Target: build                                 -->
    <!-- ============================================  -->
    <target name="build" depends="prepare">
        <foreach param="name" absparam="path" target="build-module">
            <fileset dir=".">
                <type type="dir" />
                <include name="ActiveSync" />
                <include name="Addressbook" />
                <include name="Admin" />
                <include name="Calendar" />
                <!--<include name="Courses" />-->
                <!--<include name="Crm" />-->
                <include name="Felamimail" />
                <!--<include name="Filemanager" />-->
                <include name="Messenger" />
                <!--<include name="Phone" />-->
                <!--<include name="RequestTracker" />-->
                <!--<include name="Sales" />-->
                <include name="Setup" />
                <!--<include name="SimpleFAQ" />-->
                <!--<include name="Sipgate" />-->
                <include name="Tasks" />
                <!--<include name="Timetracker" />-->
                <include name="Tinebase" />
                <!--<include name="Voipmanager" />-->
                <include name="Webconference" />
                <exclude name="build/*" />
                <exclude name="images/*" />
                <exclude name="styles/*" />
                <exclude name="themes/*" />
                <exclude name="library/*" />
                <exclude name="Zend/*" />
            </fileset>
        </foreach>
    </target>
    
    <!-- ============================================  -->
    <!-- Target: build-module                          -->
    <!-- ============================================  -->
    <target name="build-module" description="build single module" depends="prepare">
        <echo msg="Building ${name}" />
        
        <!-- do jsb2tk build -->
        <jsb2tk-build appName="${name}" />
        
        <!-- replace buildstuff -->
        <reflexive>
            <filterchain>
                <replaceregexp>
                    <regexp pattern="Tine\.clientVersion\.buildType[^;]*" replace='Tine.clientVersion.buildType="RELEASE"' modifiers="i" />
                    <regexp pattern="Tine\.clientVersion\.buildDate[^;]*" replace='Tine.clientVersion.buildDate="${buildDate}"' modifiers="i"/>
                    <regexp pattern="Tine\.clientVersion\.buildRevision[^;]*" replace='Tine.clientVersion.codeName="${buildRevision}"' modifiers="i"/>
                </replaceregexp>
            </filterchain>
            
            <fileset dir="${builddir}">
                <include name="${name}/js/*-FAT*" />
            </fileset>
        </reflexive>
        
        <!-- debug mode for debug files -->
        <reflexive>
            <filterchain>
                <replaceregexp>
                    <regexp pattern="Tine\.clientVersion\.buildType[^;]*" replace="Tine.clientVersion.buildType = 'DEBUG'"/>
                </replaceregexp>
            </filterchain>
            
            <fileset dir="${builddir}">
                <include name="${name}/js/*-FAT-debug*" />
            </fileset>
        </reflexive>
        
        <!-- original jsb2 builds -->
        <!-- NOTE as jsb2tk has no path adoption yet we need to do it here -->
        <copy toDir="${project.basedir}">
            <fileset dir="${builddir}">
                <include name="${name}/*/*" />
            </fileset>
            
            <filterchain>
                <replaceregexp>
                    <regexp pattern="(\.\.\/){2,}images" replace="../../images" modifiers="i"/>
                    <regexp pattern="(\.\.\/){2,}library" replace="../../library" modifiers="i"/>
                </replaceregexp>
            </filterchain>
            
        </copy>
        
        <!-- adopt path for getJS/getCSS -->
        <!-- TODO add deploymode GETTER and move this to jsb2tk -->
        <copy toDir="${project.basedir}">
            <mapper type="regexp" from="^(.*\.(js|css))" to="\1.inc"/>
            
            <filterchain>
                <replaceregexp>
                    <regexp pattern="(\.\.\/)+images" replace="images" modifiers="i"/>
                    <regexp pattern="(\.\.\/)+library" replace="library" modifiers="i"/>
                </replaceregexp>
            </filterchain>

            <fileset dir="${builddir}">
                <include name="${name}/*/*" />
            </fileset>
            
        </copy>
        
        <!-- translations -->
        <translation-build appName="${name}" />
        <jsMin targetDir="${builddir}/${name}/js" failOnError="false">
            <fileset dir="${builddir}/${name}/js">
                <include name="*-lang-*-debug.js"/>
            </fileset>
        </jsMin>
        
        <copy toDir="${project.basedir}/${name}/js">
            <fileset dir="${builddir}/${name}/js">
                <include name="*-lang-*-debug.js" />
            </fileset>
        </copy>
        
        <copy toDir="${project.basedir}/${name}/js">
            <fileset dir="${builddir}/${name}/js">
                <include name="*-lang-*-debug-min.js" />
            </fileset>
            
            <mapper type="regexp" from="^(.*)-debug-min.js" to="\1.js"/>
        </copy>
        
    </target>
    
    <!-- ============================================  -->
    <!-- Target: clean                                 -->
    <!-- ============================================  -->
    <target name="clean">
        <delete dir="${builddir}" includeemptydirs="true" verbose="false" failonerror="false" />
        <delete>
            <fileset dir=".">
                <include name="*/*/*-FAT*" />
                <include name="*/js/*-lang-*" />
                <include name="${project.basedir}/${localedir}/build/*" />
            </fileset>
        </delete>
    </target>
    
    <!-- ============================================  -->
    <!-- Task: init                                    -->
    <!-- ============================================  -->
    <adhoc-task name="init"><![CDATA[
        class initTask extends Task {
            function main() {
                set_include_path('${project.basedir}' . PATH_SEPARATOR . '${project.basedir}/library' . PATH_SEPARATOR . get_include_path());
                require_once 'Tinebase/Helper.php';
                require_once 'Zend/Loader/Autoloader.php';
                $autoloader = Zend_Loader_Autoloader::getInstance();
                $autoloader->setFallbackAutoloader(true);
                Tinebase_Autoloader::initialize($autoloader);
            }
        }
    ]]></adhoc-task>
    
    <!-- ============================================  -->
    <!-- Task: jsb2tk-build                            -->
    <!-- ============================================  -->
    <adhoc-task name="jsb2tk-build"><![CDATA[
        class jsb2tkTask extends Task {
            private $appName;
            
            function setAppName($appName) {
                $this->appName = $appName;
            }
            
            function main() {
                $jsb2 = "${project.basedir}/{$this->appName}/{$this->appName}.jsb2";
                if (file_exists($jsb2)) {
                    $this->log("In jsb2tkTask: " . $this->appName);
                    
                    require_once('${project.basedir}/library/jsb2tk/jsb2tk.php');
                    
                    $tk = new jsb2tk(array(
                        'homeDir' => '${builddir}'
                    ));
                    
                    $tk->register($jsb2);
                    $tk->buildAll();
                }
            }
        }
    ]]></adhoc-task>
    
    <!-- ============================================  -->
    <!-- Task: translation-build                       -->
    <!-- ============================================  -->
    <adhoc-task name="translation-build"><![CDATA[
        class translationTask extends Task {
            private $appName;
        
            function setAppName($appName) {
                $this->appName = $appName;
            }
            
            function main() {
                if (! file_exists('${builddir}/' . "{$this->appName}/js")) return;
                $availableTranslations = Tinebase_Translation::getAvailableTranslations();
    
                foreach ($availableTranslations as $translation) {
                    $localeString = $translation['locale'];
                    $locale = new Zend_Locale($localeString);
                    
                    $jsTranslation = Tinebase_Translation::getJsTranslations($locale, $this->appName);
                    file_put_contents('${builddir}/' . "{$this->appName}/js/{$this->appName}-lang-{$locale}-debug.js", $jsTranslation);
                }         
            }
        }
    ]]></adhoc-task>
    
    <!-- ============================================  -->
    <!-- Task: manifest-build                          -->
    <!-- TODO  make it working (just a codestore)      -->
    <!-- ============================================  -->
    <adhoc-task name="manifest-build"><![CDATA[
        class manifestBuildTask extends Task {
            private $appName;
        
            function setAppName($appName) {
                $this->appName = $appName;
            }
            
            function main() {
                $defaultFiles = "CACHE MANIFEST\n# Build by $build\nCACHE:\n";
                
                $manifest = fopen('${project.basedir}/tine20.manifest', 'w+');
                fwrite($manifest, $defaultFiles . "\n");
                
                $files = array(
                    'Tinebase/css/tine-all.css',                               
                    'Tinebase/js/tine-all.js',
                    'styles/tine20.css',                             
                    'library/ExtJS/ext-all.js',
                    'library/ExtJS/adapter/ext/ext-base.js',   
                    'library/ExtJS/resources/css/ext-all.css',
                    'images/oxygen/16x16/actions/knewstuff.png' // ???
                );
                
                // no subdirs! => solaris does not know find -maxdeps 1
                exec("cd \"$tine20path\"; ls images/* | grep images/ | egrep '\.png|\.gif|\.jpg'", $baseImages);
                $files = array_merge($files, $baseImages);
                
                $tineCSS = file_get_contents($tine20path . '/Tinebase/css/tine-all-debug.css');
                preg_match_all('/url\(..\/..\/(images.*)\)/U', $tineCSS, $matches);
                $files = array_merge($files, $matches[1]);
                
                $tineCSS = file_get_contents($tine20path . '/Tinebase/css/tine-all-debug.css');
                preg_match_all('/url\(..\/..\/(library.*)\)/U', $tineCSS, $matches);
                $files = array_merge($files, $matches[1]);
                    
                $tineJs = file_get_contents($tine20path . '/Tinebase/js/tine-all-debug.js');
                preg_match_all('/labelIcon: [\'|"](.*png)/U', $tineJs, $matches);
                $files = array_merge($files, $matches[1]);
                
                $tineJs = file_get_contents($tine20path . '/Tinebase/js/tine-all-debug.js');
                preg_match_all('/labelIcon: [\'|"](.*gif)/U', $tineJs, $matches);
                $files = array_merge($files, $matches[1]);
                
                $tineJs = file_get_contents($tine20path . '/Tinebase/js/tine-all-debug.js');
                preg_match_all('/src=[\'|"](.*png)/U', $tineJs, $matches);
                $files = array_merge($files, $matches[1]);
                
                $tineJs = file_get_contents($tine20path . '/Tinebase/js/tine-all-debug.js');
                preg_match_all('/src=[\'|"](.*gif)/U', $tineJs, $matches);
                $files = array_merge($files, $matches[1]);
                
                exec("cd \"$tine20path\"; find library/ExtJS/resources/images -type f -name *.gif", $extImages);
                $files = array_merge($files, $extImages);
                exec("cd \"$tine20path\"; find library/ExtJS/resources/images -type f -name *.png", $extImages);
                $files = array_merge($files, $extImages);
                
                exec("cd \"$tine20path\"; find styles -type f", $tine20Styles);
                $files = array_merge($files, $tine20Styles);
                
                $files = array_unique($files);
                
                foreach($files as $file) {
                    if (! is_file("$tine20path/$file")) {
                        echo "WARNING $file not found, removing it from manifest.\n";
                    } else if (substr(basename($file), 0, 1) == '.' || ! preg_match('/(js|css|gif|png|jpg)$/', $file))  {
                        echo "INFO $file is unwanted, removing it from manifest.\n";
                    } else {
                        fwrite($manifest, $file . "\n");
                    }
                }
                
                fclose($manifest);
            }
        }
    ]]></adhoc-task>
    
    <!-- ============================================  -->
    <!-- Task: zend-translation-build                  -->
    <!-- TODO  make a target for this                  -->
    <!-- ============================================  -->
    <adhoc-task name="zend-translation-build"><![CDATA[
        class zendTranslationTask extends Task {
            function main() {
                // dump one langfile for every locale
                $localelist = Zend_Locale::getLocaleList();
                foreach ($localelist as $locale => $something) {
                    try {   
                        $js = $this->createJsTranslationLists($locale);
                        file_put_contents('${builddir}/${localedir}/static/' . "generic-$locale-debug.js", $js);
                    } catch (Exception $e) {
                        echo "WARNING: could not create translation file for '$locale': '{$e->getMessage()}'\n";
                    }
                }
            }
            
            /**
             * creates translation lists js files for locale with js object
             *
             * @param   string $_locale
             * @return  string the file contents
             */
            function createJsTranslationLists($_locale) {
                $jsContent = "Locale.prototype.TranslationLists = {\n";
            
                $types = array(
                    'Date'           => array('path' => 'Date'),
                    'Time'           => array('path' => 'Time'),
                    'DateTime'       => array('path' => 'DateTime'),
                    'Month'          => array('path' => 'Month'),
                    'Day'            => array('path' => 'Day'),
                    'Symbols'        => array('path' => 'Symbols'),
                    'Question'       => array('path' => 'Question'),
                    'Language'       => array('path' => 'Language'),
                    'CountryList'    => array('path' => 'Territory', 'value' => 2),
                    'Territory'      => array('path' => 'Territory', 'value' => 1),
                    'CityToTimezone' => array('path' => 'CityToTimezone'),
                );
                
                $zendLocale = new Zend_Locale($_locale);
                
                foreach ( $types as $name => $path) {
                    $list = $zendLocale->getTranslationList($path['path'], $_locale, array_key_exists('value', $path) ? $path['value'] : false);
                    //print_r ( $list );
                    
                    if ( is_array($list) ) {
                        $jsContent .= "\n\t$name: {";                
                            
                        foreach ( $list as $key => $value ) {    
                            // convert ISO -> PHP for date formats
                            if ( in_array($name, array('Date', 'Time', 'DateTime')) ) {
                                $value = $this->convertIsoToPhpFormat($value);
                            }
                            $value = preg_replace("/\"/", '\"', $value);        
                            $jsContent .= "\n\t\t'$key': \"$value\",";
                        }
                        // remove last comma
                        $jsContent = chop($jsContent, ",");
                                
                        $jsContent .= "\n\t},";
                    }
                }    
                $jsContent = chop($jsContent, ",");
                
                $jsContent .= "\n};\n";
                return $jsContent;
            }
            
            /**
             * Converts a format string from ISO to PHP format
             * reverse the functionality of Zend's convertPhpToIsoFormat()
             * 
             * @param  string  $format  Format string in PHP's date format
             * @return string           Format string in ISO format
             */
            function convertIsoToPhpFormat($format) {
                $convert = array(
                    'c' => '/yyyy-MM-ddTHH:mm:ssZZZZ/',
                    '$1j$2' => '/([^d])d([^d])/',
                    'j$1' => '/^d([^d])/', 
                    '$1j' => '/([^d])d$/', 
                    't' => '/ddd/', 
                    'd' => '/dd/', 
                    'l' => '/EEEE/', 
                    'D' => '/EEE/', 
                    'S' => '/SS/',
                    'w' => '/eee/', 
                    'N' => '/e/', 
                    'z' => '/D/', 
                    'W' => '/w/', 
                    '$1n$2' => '/([^M])M([^M])/', 
                    'n$1' => '/^M([^M])/', 
                    '$1n' => '/([^M])M$/', 
                    'F' => '/MMMM/', 
                    'M' => '/MMM/',
                    'm' => '/MM/', 
                    'L' => '/l/', 
                    'o' => '/YYYY/', 
                    'Y' => '/yyyy/', 
                    'y' => '/yy/',
                    'a' => '/a/', 
                    'A' => '/a/', 
                    'B' => '/B/', 
                    'h' => '/hh/',
                    'g' => '/h/', 
                    '$1G$2' => '/([^H])H([^H])/', 
                    'G$1' => '/^H([^H])/', 
                    '$1G' => '/([^H])H$/', 
                    'H' => '/HH/', 
                    'i' => '/mm/', 
                    's' => '/ss/', 
                    'e' => '/zzzz/', 
                    'I' => '/I/', 
                    'P' => '/ZZZZ/', 
                    'O' => '/Z/',
                    'T' => '/z/', 
                    'Z' => '/X/', 
                    'r' => '/r/', 
                    'U' => '/U/',
                );
                
                //echo "pre:".$format."\n";
                
                $patterns = array_values($convert);
                $replacements = array_keys($convert);
                $format = preg_replace($patterns, $replacements, $format);
                
                //echo "post:".$format."\n";
                //echo "---\n";
                
                return $format;
            }
        }
    ]]></adhoc-task>
</project>
